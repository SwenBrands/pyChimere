# -*- coding: utf-8 -*-

##this script loads the concatenated files in a directory to a single xarray dataArray, remove the double entries at 03 UTC and then saves to a single nc file

#load python packages
import numpy as np
import xarray as xr
from mpl_toolkits.basemap import Basemap
from utiles import crea_cmap
import pandas as pd
import os
import sys
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot as plt
import matplotlib.colors as colors

##set input variables
homedir = os.getenv("HOME")
lustre = os.getenv("LUSTRE")
scriptpath = homedir+'/OP/LANZAR/chimere2017r4/figures'
srcfile = lustre+'/OP/DATOS/RESULTADOS/chimere2017r4/hindcast_05_gal3/chimere_gal3_hourly_surface_2018010103_2019010102.nc'
savepath = lustre+'/OP/DATOS/RESULTADOS/chimere2017r4/hindcast_05_gal3/climatology'
species = ['O3','PM25','PM25ant','PM25bio','PM10','PM10ant','PM10bio','NO2','SO2','pSALT','pDUST','hght','pISOPA1','pH2SO4','pHNO3','PAN','pNH3','pBCAR']
domain = 'gal3'
season = 'anual'

titlesize = 6
xuntasize = 4
xuntalabel = u'MeteoGalicia - Xunta de Galicia e LMD Paris'
coordsize1 = 4 #size of the coordinate text for the large domain
coordsize2 = 5 #size of the coordinate text for the small domain
horpos = 0.5
verpos1 = 0.14 #vertical position of the xunta label in the large domain
verpos2 = 0.05 #vertical position of the xunta label in the small domain
verpos3 = 0.815 #vertical position of the title in the large domain
verpos4 = 0.91 #vertical position of the title in the small domain
lonstep = 2 #longitudue intervals to be printed along x-axis of the figures, used for the large domain only
leadtime = 73 #leadtime of the forecast in hours, 25 or 73
starthour = 03 #init of the forecasts
reduction = 4
projtype = 'cea'
rlat1 = 44 #refernce lat for large domain
rlat2 = 43 #refernce lat for small domain
markertype = ',' #marker for precip. occurrence
markercolor = 'white'

##EXECUTE ##############################################################
os.chdir(scriptpath)
execfile('get_rgbs.py')

#define barbs and crosses
if domain in {'gal05r', 'gal0504r','gal3'}:
    barblength = 4
    msize = 0.5
    figdomain = 'd70'
    dpival = 300 #200
    width = 3
    height = 3
    barbwidth = 0.4
elif domain in {'pib27','ib15r', 'ib16r', 'ib1914r', 'gal1511r', 'gal1511r2', 'gal16r', 'gal15r'}:
    barblength = 3
    msize = 0.7
    figdomain = 'd69'
    dpival = 250
    width = 3
    height = 3
    barbwidth = 0.4
else:
    print("ATTENTION: Check entry for <domain>")

nc = xr.open_dataset(srcfile) #this is the file generated by validation/gen_time_series.py
#extract common variables
times = nc.Times.values
lats = nc.lat.values
lons = nc.lon.values

#set default variables for Basemap
minlat = np.min(lats)
maxlat = np.max(lats)
minlon = np.min(lons)
maxlon = np.max(lons)

#get parallels and meridians
if domain in {'gal05r', 'gal0504r','gal3'}:
    parallels = np.arange(np.ceil(minlat),np.floor(maxlat+1))
    meridians = np.arange(np.ceil(minlon),np.floor(maxlon+1))
    coordsize = coordsize2
    verpos = verpos2
    verpos_title = verpos4
elif domain in {'pib27','ib15r', 'ib16r', 'km12', 'ib1914r', 'km36', 'gal1511r', 'gal1511r2', 'gal16r', 'gal15r'}:
    parallels = np.arange(np.ceil(minlat),np.floor(maxlat+1))
    meridians = np.arange(np.ceil(minlon)+1,np.floor(maxlon+1),lonstep)
    coordsize = coordsize1
    verpos = verpos1
    verpos_title = verpos3
else:
    print("ATTENTION: Check entry for <domain>")

#load variables in a loop
for vv in range(len(species)):
    print('INFO: processing '+species[vv])
    
    if species[vv] in ('O3','pISOPA1','pH2SO4','pHNO3','PAN','pNH3'):
        cbarlabel = 'ug/m3'    
        colormap = crea_cmap(cbounds_o3, rgbs_o3, under_o3, over_o3)
        cbounds = cbounds_o3        
    elif species[vv] == "NO2":
        cbarlabel = 'ug/m3'    
        colormap = crea_cmap(cbounds_no2, rgbs_no2, under_no2, over_no2)
        cbounds = cbounds_no2
        over_val = over_no2        
    elif species[vv] == "hght":
        cbarlabel = 'm'
        colormap = crea_cmap(cbounds_hght, rgbs_no2, under_no2, over_no2)
        #colormap = 'gist_ncar'
        cbounds = cbounds_hght
        over_val = over_co
    elif species[vv] in ("PM10","PM10bio","PM10ant","pSALT","pDUST"):
        cbarlabel = 'ug/m3'
        colormap = crea_cmap(cbounds_pm10, rgbs_pm10, under_pm10, over_pm10)
        cbounds = cbounds_pm10
        over_val = over_pm10
    elif species[vv] in ("PM25","PM25bio","PM25ant"):
        cbarlabel = 'ug/m3'
        colormap = crea_cmap(cbounds_pm25, rgbs_pm25, under_pm25, over_pm25)
        cbounds = cbounds_pm25
    elif species[vv] == 'SO2':
        cbarlabel = 'ug/m3'
        colormap = crea_cmap(cbounds_so2, rgbs_so2, under_so2, over_so2)
        cbounds = cbounds_so2
    elif species[vv] == "pBCAR": #using rgbs, under and over from pm25
        cbarlabel = 'ug/m3'
        colormap = crea_cmap(cbounds_pbcar, rgbs_pm10, under_pm10, over_pm10)
        cbounds = cbounds_pbcar
    elif species[vv] == "CO":
        cbarlabel = 'mg/m3'
        colormap = crea_cmap(cbounds_co, rgbs_co, under_co, over_co)
        cbounds = cbounds_co
    else:
         print('ATTENTION: unknown entry for <species>')    
    
    variable = nc.variables[species[vv]]
    data = variable.values
    if species[vv] == "CO":
        data = data/1000
    clim = np.mean(data,axis=0)
    
    if species[vv] == 'hght':
        vallab = 'altura'
    else:
        vallab = u'concentraci√≥n'
    
    #rescale the colorbar as a function of the season of the year
    if species[vv] == 'SO2':
        cbounds = np.linspace(np.min(clim), np.max(clim)/2, len(cbounds))
    else:
        cbounds = np.linspace(np.min(clim), np.max(clim), len(cbounds))
    
    #plot climatological maps
    fig1 = plt.figure()
    fig1.set_size_inches(width,height)    
    if domain in {'gal05r', 'gal0504r','gal3'}:
        mymap = Basemap(projection=projtype, llcrnrlon=minlon, llcrnrlat=minlat, urcrnrlon=maxlon ,urcrnrlat=maxlat ,resolution='c', lat_ts=rlat2)
        X, Y = mymap(lons,lats)        
        mymap.contourf(X,Y,clim, cbounds, cmap=colormap, extend='both')
        mymap.readshapefile(scriptpath+'/shapes/municipios', 'municipios',linewidth=0.35, color='k', antialiased=1)          
        mymap.readshapefile(scriptpath+'/shapes/espana', 'espana',linewidth=0.35, color='k', antialiased=1)
        mymap.readshapefile(scriptpath+'/shapes/portugal', 'portugal',linewidth=0.35, color='k', antialiased=1)        
    elif domain in {'pib27','ib15r', 'ib16r', 'km12', 'ib1914r', 'km36', 'gal1511r', 'gal1511r2', 'gal16r', 'gal15r'}:
        mymap = Basemap(projection=projtype, resolution='l', llcrnrlon=np.min(lons),llcrnrlat=np.min(lats),urcrnrlon=np.max(lons),urcrnrlat=np.max(lats), lat_ts=rlat1)
        X, Y = mymap(lons,lats) #activate if contourf is used
        mymap.contourf(X, Y, clim, cbounds, cmap=colormap, extend='both')
        mymap.drawcoastlines()
        mymap.drawcountries()        
    else:
        print("ATTENTION: Check entry for <domain>")

    ##figure finetuning
    cbar = mymap.colorbar()
    cbar.set_label(cbarlabel, size=titlesize)
    cbar.ax.tick_params(labelsize=titlesize)
    cbar.set_ticks(cbounds)
    mymap.drawparallels(parallels,labels=[True,False,False,True], color='None', size=coordsize)
    mymap.drawmeridians(meridians,labels=[True,False,False,True], color='None', size=coordsize)
    plt.figtext(horpos, verpos_title, species[vv]+' '+vallab+' clim', wrap=True, horizontalalignment='center', fontsize=titlesize, color='black')
    plt.figtext(horpos, verpos, xuntalabel, wrap=True, horizontalalignment='center', fontsize=xuntasize, color='blue')
        
    ## save the figure
    savename = savepath+'/'+'chimere2017r4_'+species[vv]+'_clim_'+season+'_'+str(domain)+'_sfc.png'            
    print(savename)
    fig1.savefig(savename, dpi=dpival, bbox_inches='tight')
    plt.close(fig1)

#close nc file
nc.close()
